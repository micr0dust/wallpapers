/*
 * A fast javascript implementation of simplex noise by Jonas Wagner
 * based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
 * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 *
 * This code was placed in the public domain by Jonas Wagner.
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 */
!function(){"use strict";var r=.5*(Math.sqrt(3)-1),e=(3-Math.sqrt(3))/6,t=1/6,a=(Math.sqrt(5)-1)/4,o=(5-Math.sqrt(5))/20;function i(r){var e;e="function"==typeof r?r:r?function(){var r=0,e=0,t=0,a=1,o=Array.prototype.slice.call(arguments);0==o.length&&(o=[+new Date]);var i=(n=4022871197,function(r){r=r.toString();for(var e=0;e<r.length;e++){var t=.02519603282416938*(n+=r.charCodeAt(e));t-=n=t>>>0,n=(t*=n)>>>0,n+=4294967296*(t-=n)}return 2.3283064365386963e-10*(n>>>0)});var n;r=i(" "),e=i(" "),t=i(" ");for(var f=0;f<o.length;f++)(r-=i(o[f]))<0&&(r+=1),(e-=i(o[f]))<0&&(e+=1),(t-=i(o[f]))<0&&(t+=1);return i=null,function(){var o=2091639*r+2.3283064365386963e-10*a;return r=e,e=t,t=o-(a=0|o)}}(r):Math.random,this.p=f(e),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(var t=0;t<512;t++)this.perm[t]=this.p[255&t],this.permMod12[t]=this.perm[t]%12}i.prototype={grad3:new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),grad4:new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]),noise2D:function(t,a){var o,i,n=this.permMod12,f=this.perm,s=this.grad3,v=0,h=0,l=0,d=(t+a)*r,u=Math.floor(t+d),p=Math.floor(a+d),M=(u+p)*e,m=t-(u-M),c=a-(p-M);m>c?(o=1,i=0):(o=0,i=1);var y=m-o+e,w=c-i+e,g=m-1+2*e,A=c-1+2*e,x=255&u,q=255&p,D=.5-m*m-c*c;if(D>=0){var S=3*n[x+f[q]];v=(D*=D)*D*(s[S]*m+s[S+1]*c)}var U=.5-y*y-w*w;if(U>=0){var b=3*n[x+o+f[q+i]];h=(U*=U)*U*(s[b]*y+s[b+1]*w)}var F=.5-g*g-A*A;if(F>=0){var N=3*n[x+1+f[q+1]];l=(F*=F)*F*(s[N]*g+s[N+1]*A)}return 70*(v+h+l)},noise3D:function(r,e,a){var o,i,n,f,s,v,h,l,d,u,p=this.permMod12,M=this.perm,m=this.grad3,c=.3333333333333333*(r+e+a),y=Math.floor(r+c),w=Math.floor(e+c),g=Math.floor(a+c),A=(y+w+g)*t,x=r-(y-A),q=e-(w-A),D=a-(g-A);x>=q?q>=D?(s=1,v=0,h=0,l=1,d=1,u=0):x>=D?(s=1,v=0,h=0,l=1,d=0,u=1):(s=0,v=0,h=1,l=1,d=0,u=1):q<D?(s=0,v=0,h=1,l=0,d=1,u=1):x<D?(s=0,v=1,h=0,l=0,d=1,u=1):(s=0,v=1,h=0,l=1,d=1,u=0);var S=x-s+t,U=q-v+t,b=D-h+t,F=x-l+2*t,N=q-d+2*t,C=D-u+2*t,P=x-1+.5,T=q-1+.5,_=D-1+.5,j=255&y,k=255&w,z=255&g,B=.6-x*x-q*q-D*D;if(B<0)o=0;else{var E=3*p[j+M[k+M[z]]];o=(B*=B)*B*(m[E]*x+m[E+1]*q+m[E+2]*D)}var G=.6-S*S-U*U-b*b;if(G<0)i=0;else{var H=3*p[j+s+M[k+v+M[z+h]]];i=(G*=G)*G*(m[H]*S+m[H+1]*U+m[H+2]*b)}var I=.6-F*F-N*N-C*C;if(I<0)n=0;else{var J=3*p[j+l+M[k+d+M[z+u]]];n=(I*=I)*I*(m[J]*F+m[J+1]*N+m[J+2]*C)}var K=.6-P*P-T*T-_*_;if(K<0)f=0;else{var L=3*p[j+1+M[k+1+M[z+1]]];f=(K*=K)*K*(m[L]*P+m[L+1]*T+m[L+2]*_)}return 32*(o+i+n+f)},noise4D:function(r,e,t,i){this.permMod12;var f,s,v,h,l,d,u,p,M,m,c,y,w,g,A,x,q,D=this.perm,S=this.grad4,U=(r+e+t+i)*a,b=Math.floor(r+U),F=Math.floor(e+U),N=Math.floor(t+U),C=Math.floor(i+U),P=(b+F+N+C)*o,T=r-(b-P),_=e-(F-P),j=t-(N-P),k=i-(C-P),z=T>_?32:0;T>j&&(z|=16),T>k&&(z|=8),_>j&&(z|=4),_>k&&(z|=2),j>k&&(z|=1),d=n[z][0]>=3?1:0,u=n[z][1]>=3?1:0,p=n[z][2]>=3?1:0,M=n[z][3]>=3?1:0,m=n[z][0]>=2?1:0,c=n[z][1]>=2?1:0,y=n[z][2]>=2?1:0,w=n[z][3]>=2?1:0,g=n[z][0]>=1?1:0,A=n[z][1]>=1?1:0,x=n[z][2]>=1?1:0,q=n[z][3]>=1?1:0;var B=T-d+o,E=_-u+o,G=j-p+o,H=k-M+o,I=T-m+2*o,J=_-c+2*o,K=j-y+2*o,L=k-w+2*o,O=T-g+3*o,Q=_-A+3*o,R=j-x+3*o,V=k-q+3*o,W=T-1+4*o,X=_-1+4*o,Y=j-1+4*o,Z=k-1+4*o,$=255&b,rr=255&F,er=255&N,tr=255&C,ar=.6-T*T-_*_-j*j-k*k;if(ar<0)f=0;else{var or=D[$+D[rr+D[er+D[tr]]]]%32*4;f=(ar*=ar)*ar*(S[or]*T+S[or+1]*_+S[or+2]*j+S[or+3]*k)}var ir=.6-B*B-E*E-G*G-H*H;if(ir<0)s=0;else{var nr=D[$+d+D[rr+u+D[er+p+D[tr+M]]]]%32*4;s=(ir*=ir)*ir*(S[nr]*B+S[nr+1]*E+S[nr+2]*G+S[nr+3]*H)}var fr=.6-I*I-J*J-K*K-L*L;if(fr<0)v=0;else{var sr=D[$+m+D[rr+c+D[er+y+D[tr+w]]]]%32*4;v=(fr*=fr)*fr*(S[sr]*I+S[sr+1]*J+S[sr+2]*K+S[sr+3]*L)}var vr=.6-O*O-Q*Q-R*R-V*V;if(vr<0)h=0;else{var hr=D[$+g+D[rr+A+D[er+x+D[tr+q]]]]%32*4;h=(vr*=vr)*vr*(S[hr]*O+S[hr+1]*Q+S[hr+2]*R+S[hr+3]*V)}var lr=.6-W*W-X*X-Y*Y-Z*Z;if(lr<0)l=0;else{var dr=D[$+1+D[rr+1+D[er+1+D[tr+1]]]]%32*4;l=(lr*=lr)*lr*(S[dr]*W+S[dr+1]*X+S[dr+2]*Y+S[dr+3]*Z)}return 27*(f+s+v+h+l)}};var n=[[0,1,2,3],[0,1,3,2],[0,0,0,0],[0,2,3,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,3,0],[0,2,1,3],[0,0,0,0],[0,3,1,2],[0,3,2,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,3,2,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,0,3],[0,0,0,0],[1,3,0,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,3,0,1],[2,3,1,0],[1,0,2,3],[1,0,3,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,3,1],[0,0,0,0],[2,1,3,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,1,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,0,1,2],[3,0,2,1],[0,0,0,0],[3,1,2,0],[2,1,0,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,1,0,2],[0,0,0,0],[3,2,0,1],[3,2,1,0]];function f(r){var e,t=new Uint8Array(256);for(e=0;e<256;e++)t[e]=e;for(e=0;e<255;e++){var a=e+~~(r()*(256-e)),o=t[e];t[e]=t[a],t[a]=o}return t}i._buildPermutationTable=f,"undefined"!=typeof define&&define.amd&&define((function(){return i})),"undefined"!=typeof exports?exports.SimplexNoise=i:"undefined"!=typeof window&&(window.SimplexNoise=i),"undefined"!=typeof module&&(module.exports=i)}();